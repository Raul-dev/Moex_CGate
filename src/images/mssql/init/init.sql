/*
Deployment script for CGate

This code was generated by a tool.
Changes to this file may cause incorrect behavior and will be lost if
the code is regenerated.
*/

GO
SET ANSI_NULLS, ANSI_PADDING, ANSI_WARNINGS, ARITHABORT, CONCAT_NULL_YIELDS_NULL, QUOTED_IDENTIFIER ON;

SET NUMERIC_ROUNDABORT OFF;


GO
:setvar LinkSRVLog "LinkSRVLog"
:setvar DatabaseName "CGate"
:setvar DefaultFilePrefix "CGate"

GO
:on error exit
GO
/*
Detect SQLCMD mode and disable script execution if SQLCMD mode is not supported.
To re-enable the script after enabling SQLCMD mode, execute the following:
SET NOEXEC OFF; 
*/
:setvar __IsSqlCmdEnabled "True"
GO
IF N'$(__IsSqlCmdEnabled)' NOT LIKE N'True'
    BEGIN
        PRINT N'SQLCMD mode must be enabled to successfully execute this script.';
        SET NOEXEC ON;
    END


GO
USE [master];


GO

IF (DB_ID(N'$(DatabaseName)') IS NOT NULL) 
BEGIN
    ALTER DATABASE [$(DatabaseName)]
    SET SINGLE_USER WITH ROLLBACK IMMEDIATE;
    DROP DATABASE [$(DatabaseName)];
END


GO
PRINT N'Creating database $(DatabaseName)...'
GO
CREATE DATABASE [$(DatabaseName)]
GO
IF EXISTS (SELECT 1
           FROM   [master].[dbo].[sysdatabases]
           WHERE  [name] = N'$(DatabaseName)')
    BEGIN
        ALTER DATABASE [$(DatabaseName)]
            SET AUTO_CLOSE OFF 
            WITH ROLLBACK IMMEDIATE;
    END


GO
USE [$(DatabaseName)];


GO
IF EXISTS (SELECT 1
           FROM   [master].[dbo].[sysdatabases]
           WHERE  [name] = N'$(DatabaseName)')
    BEGIN
        ALTER DATABASE [$(DatabaseName)]
            SET ANSI_NULLS ON,
                ANSI_PADDING ON,
                ANSI_WARNINGS ON,
                ARITHABORT ON,
                CONCAT_NULL_YIELDS_NULL ON,
                NUMERIC_ROUNDABORT OFF,
                QUOTED_IDENTIFIER ON,
                ANSI_NULL_DEFAULT ON,
                CURSOR_DEFAULT LOCAL,
                RECOVERY SIMPLE,
                CURSOR_CLOSE_ON_COMMIT OFF,
                AUTO_CREATE_STATISTICS ON,
                AUTO_SHRINK OFF,
                AUTO_UPDATE_STATISTICS ON,
                RECURSIVE_TRIGGERS OFF 
            WITH ROLLBACK IMMEDIATE;
    END


GO
IF EXISTS (SELECT 1
           FROM   [master].[dbo].[sysdatabases]
           WHERE  [name] = N'$(DatabaseName)')
    BEGIN
        ALTER DATABASE [$(DatabaseName)]
            SET ALLOW_SNAPSHOT_ISOLATION OFF;
    END


GO
IF EXISTS (SELECT 1
           FROM   [master].[dbo].[sysdatabases]
           WHERE  [name] = N'$(DatabaseName)')
    BEGIN
        ALTER DATABASE [$(DatabaseName)]
            SET READ_COMMITTED_SNAPSHOT ON 
            WITH ROLLBACK IMMEDIATE;
    END


GO
IF EXISTS (SELECT 1
           FROM   [master].[dbo].[sysdatabases]
           WHERE  [name] = N'$(DatabaseName)')
    BEGIN
        ALTER DATABASE [$(DatabaseName)]
            SET AUTO_UPDATE_STATISTICS_ASYNC OFF,
                PAGE_VERIFY NONE,
                DATE_CORRELATION_OPTIMIZATION OFF,
                DISABLE_BROKER,
                PARAMETERIZATION SIMPLE,
                SUPPLEMENTAL_LOGGING OFF 
            WITH ROLLBACK IMMEDIATE;
    END


GO
IF IS_SRVROLEMEMBER(N'sysadmin') = 1
    BEGIN
        IF EXISTS (SELECT 1
                   FROM   [master].[dbo].[sysdatabases]
                   WHERE  [name] = N'$(DatabaseName)')
            BEGIN
                EXECUTE sp_executesql N'ALTER DATABASE [$(DatabaseName)]
    SET TRUSTWORTHY OFF,
        DB_CHAINING OFF 
    WITH ROLLBACK IMMEDIATE';
            END
    END
ELSE
    BEGIN
        PRINT N'The database settings cannot be modified. You must be a SysAdmin to apply these settings.';
    END


GO
IF IS_SRVROLEMEMBER(N'sysadmin') = 1
    BEGIN
        IF EXISTS (SELECT 1
                   FROM   [master].[dbo].[sysdatabases]
                   WHERE  [name] = N'$(DatabaseName)')
            BEGIN
                EXECUTE sp_executesql N'ALTER DATABASE [$(DatabaseName)]
    SET HONOR_BROKER_PRIORITY OFF 
    WITH ROLLBACK IMMEDIATE';
            END
    END
ELSE
    BEGIN
        PRINT N'The database settings cannot be modified. You must be a SysAdmin to apply these settings.';
    END


GO
ALTER DATABASE [$(DatabaseName)]
    SET TARGET_RECOVERY_TIME = 0 SECONDS 
    WITH ROLLBACK IMMEDIATE;


GO
IF EXISTS (SELECT 1
           FROM   [master].[dbo].[sysdatabases]
           WHERE  [name] = N'$(DatabaseName)')
    BEGIN
        ALTER DATABASE [$(DatabaseName)]
            SET FILESTREAM(NON_TRANSACTED_ACCESS = OFF),
                CONTAINMENT = NONE 
            WITH ROLLBACK IMMEDIATE;
    END


GO
IF EXISTS (SELECT 1
           FROM   [master].[dbo].[sysdatabases]
           WHERE  [name] = N'$(DatabaseName)')
    BEGIN
        ALTER DATABASE [$(DatabaseName)]
            SET AUTO_CREATE_STATISTICS ON(INCREMENTAL = OFF),
                MEMORY_OPTIMIZED_ELEVATE_TO_SNAPSHOT = OFF,
                DELAYED_DURABILITY = DISABLED 
            WITH ROLLBACK IMMEDIATE;
    END


GO
IF EXISTS (SELECT 1
           FROM   [master].[dbo].[sysdatabases]
           WHERE  [name] = N'$(DatabaseName)')
    BEGIN
        ALTER DATABASE [$(DatabaseName)]
            SET QUERY_STORE (QUERY_CAPTURE_MODE = ALL, DATA_FLUSH_INTERVAL_SECONDS = 900, INTERVAL_LENGTH_MINUTES = 60, MAX_PLANS_PER_QUERY = 200, CLEANUP_POLICY = (STALE_QUERY_THRESHOLD_DAYS = 367), MAX_STORAGE_SIZE_MB = 100) 
            WITH ROLLBACK IMMEDIATE;
    END


GO
IF EXISTS (SELECT 1
           FROM   [master].[dbo].[sysdatabases]
           WHERE  [name] = N'$(DatabaseName)')
    BEGIN
        ALTER DATABASE [$(DatabaseName)]
            SET QUERY_STORE = OFF 
            WITH ROLLBACK IMMEDIATE;
    END


GO
IF EXISTS (SELECT 1
           FROM   [master].[dbo].[sysdatabases]
           WHERE  [name] = N'$(DatabaseName)')
    BEGIN
        ALTER DATABASE SCOPED CONFIGURATION SET MAXDOP = 0;
        ALTER DATABASE SCOPED CONFIGURATION FOR SECONDARY SET MAXDOP = PRIMARY;
        ALTER DATABASE SCOPED CONFIGURATION SET LEGACY_CARDINALITY_ESTIMATION = OFF;
        ALTER DATABASE SCOPED CONFIGURATION FOR SECONDARY SET LEGACY_CARDINALITY_ESTIMATION = PRIMARY;
        ALTER DATABASE SCOPED CONFIGURATION SET PARAMETER_SNIFFING = ON;
        ALTER DATABASE SCOPED CONFIGURATION FOR SECONDARY SET PARAMETER_SNIFFING = PRIMARY;
        ALTER DATABASE SCOPED CONFIGURATION SET QUERY_OPTIMIZER_HOTFIXES = OFF;
        ALTER DATABASE SCOPED CONFIGURATION FOR SECONDARY SET QUERY_OPTIMIZER_HOTFIXES = PRIMARY;
    END


GO
IF EXISTS (SELECT 1
           FROM   [master].[dbo].[sysdatabases]
           WHERE  [name] = N'$(DatabaseName)')
    BEGIN
        ALTER DATABASE [$(DatabaseName)]
            SET TEMPORAL_HISTORY_RETENTION ON 
            WITH ROLLBACK IMMEDIATE;
    END


GO
IF fulltextserviceproperty(N'IsFulltextInstalled') = 1
    EXECUTE sp_fulltext_database 'enable';


GO
/*
 Pre-Deployment Script Template							
--------------------------------------------------------------------------------------
 This file contains SQL statements that will be executed before the build script.	
 Use SQLCMD syntax to include a file in the pre-deployment script.			
 Example:      :r .\myfile.sql								
 Use SQLCMD syntax to reference a variable in the pre-deployment script.		
 Example:      :setvar TableName MyTable							
               SELECT * FROM [$(TableName)]					
--------------------------------------------------------------------------------------
*/

DECLARE @database VARCHAR(200) = DB_NAME(),
    @server NVARCHAR(200) = '$(LinkSRVLog)';

IF EXISTS (SELECT * FROM sys.servers WHERE NAME = @server )    
    EXECUTE sp_dropserver @server = @server

IF NOT EXISTS (SELECT * FROM sys.servers WHERE NAME = @server )
BEGIN
    
    EXECUTE sp_addlinkedserver @server = @server,  
                               @srvproduct = ' ',
                               @provider = 'SQLNCLI', 
                               @datasrc = @@SERVERNAME, 
                               @catalog = @database
END

EXEC sp_serveroption LinkSRVLog, 'RPC OUT', 'TRUE'
EXEC sp_serveroption LinkSRVLog, 'remote proc transaction promotion', 'FALSE'


GO

GO
PRINT N'Creating User [CGateUser]...';


GO
CREATE LOGIN [CGateUser] WITH PASSWORD = 'MyPassword321'
GO

CREATE USER [CGateUser]
FROM LOGIN [CGateUser]
WITH DEFAULT_SCHEMA = dbo


GO
REVOKE CONNECT TO [CGateUser];


GO
PRINT N'Creating Role Membership [db_owner] for [CGateUser]...';


GO
EXECUTE sp_addrolemember @rolename = N'db_owner', @membername = N'CGateUser';


GO
PRINT N'Creating Schema [audit]...';


GO
CREATE SCHEMA [audit]
    AUTHORIZATION [dbo];


GO
PRINT N'Creating Schema [crs]...';


GO
CREATE SCHEMA [crs]
    AUTHORIZATION [dbo];


GO
PRINT N'Creating Table [audit].[LogProcedures]...';


GO
CREATE TABLE [audit].[LogProcedures] (
    [LogID]            BIGINT        IDENTITY (1, 1) NOT NULL,
    [MainID]           BIGINT        NULL,
    [ParentID]         BIGINT        NULL,
    [StartTime]        DATETIME2 (4) NOT NULL,
    [EndTime]          DATETIME2 (4) NULL,
    [Duration]         INT           NULL,
    [RowCount]         INT           NULL,
    [SysUserName]      VARCHAR (256) NOT NULL,
    [SysHostName]      VARCHAR (100) NOT NULL,
    [SysDbName]        VARCHAR (128) NOT NULL,
    [SysAppName]       VARCHAR (128) NOT NULL,
    [SPID]             INT           NOT NULL,
    [ProcedureName]    VARCHAR (512) NULL,
    [ProcedureParams]  VARCHAR (MAX) NULL,
    [ProcedureInfo]    VARCHAR (MAX) NULL,
    [ErrorMessage]     VARCHAR (MAX) NULL,
    [TransactionCount] INT           NULL,
    CONSTRAINT [PK_audit_LogProcedures] PRIMARY KEY CLUSTERED ([LogID] ASC)
);


GO
PRINT N'Creating Table [crs].[orders_log_buffer]...';


GO
CREATE TABLE [crs].[orders_log_buffer] (
    [buffer_id]  BIGINT           IDENTITY (1, 1) NOT NULL,
    [session_id] BIGINT           NOT NULL,
    [msg_id]     UNIQUEIDENTIFIER NOT NULL,
    [msg]        VARCHAR (MAX)    NULL,
    [msgtype_id] TINYINT          NULL,
    [is_error]   BIT              NOT NULL,
    [dt_create]  DATETIME2 (4)    NOT NULL,
    [dt_update]  DATETIME2 (4)    NOT NULL,
    [RefID]      AS               (CONVERT (BIGINT, json_value([msg], N'$[34]'))),
    CONSTRAINT [PK_crs_orders_log_buffer] PRIMARY KEY CLUSTERED ([buffer_id] ASC) WITH (ALLOW_PAGE_LOCKS = OFF, OPTIMIZE_FOR_SEQUENTIAL_KEY = ON)
);


GO
PRINT N'Creating Table [crs].[sys_events]...';


GO
CREATE TABLE [crs].[sys_events] (
    [replID]     BIGINT        NULL,
    [replRev]    BIGINT        NULL,
    [replAct]    BIGINT        NULL,
    [event_id]   BIGINT        NULL,
    [sess_id]    INT           NULL,
    [event_type] INT           NULL,
    [message]    NVARCHAR (64) NULL
);


GO
PRINT N'Creating Index [crs].[sys_events].[IDX_sys_events_ID_U]...';


GO
CREATE UNIQUE NONCLUSTERED INDEX [IDX_sys_events_ID_U]
    ON [crs].[sys_events]([replID] ASC);


GO
PRINT N'Creating Table [crs].[heartbeat]...';


GO
CREATE TABLE [crs].[heartbeat] (
    [replID]      BIGINT        NULL,
    [replRev]     BIGINT        NULL,
    [replAct]     BIGINT        NULL,
    [server_time] DATETIME2 (3) NULL
);


GO
PRINT N'Creating Index [crs].[heartbeat].[IDX_heartbeat_REV_U]...';


GO
CREATE UNIQUE NONCLUSTERED INDEX [IDX_heartbeat_REV_U]
    ON [crs].[heartbeat]([replRev] ASC);


GO
PRINT N'Creating Table [crs].[user_multileg_deal]...';


GO
CREATE TABLE [crs].[user_multileg_deal] (
    [replID]                BIGINT          NULL,
    [replRev]               BIGINT          NULL,
    [replAct]               BIGINT          NULL,
    [sess_id]               INT             NULL,
    [isin_id]               INT             NULL,
    [isin_id_rd]            INT             NULL,
    [isin_id_rb]            INT             NULL,
    [duration]              INT             NULL,
    [id_deal]               BIGINT          NULL,
    [id_deal_rd]            BIGINT          NULL,
    [id_deal_rb]            BIGINT          NULL,
    [public_order_id_buy]   BIGINT          NULL,
    [public_order_id_sell]  BIGINT          NULL,
    [xamount]               BIGINT          NULL,
    [price]                 DECIMAL (16, 5) NULL,
    [rate_price]            DECIMAL (16, 5) NULL,
    [swap_price]            DECIMAL (16, 5) NULL,
    [moment]                DATETIME2 (3)   NULL,
    [moment_ns]             DECIMAL (20)    NULL,
    [nosystem]              TINYINT         NULL,
    [xstatus_buy]           BIGINT          NULL,
    [xstatus_sell]          BIGINT          NULL,
    [ext_id_buy]            INT             NULL,
    [ext_id_sell]           INT             NULL,
    [code_buy]              NVARCHAR (7)    NULL,
    [code_sell]             NVARCHAR (7)    NULL,
    [comment_buy]           NVARCHAR (20)   NULL,
    [comment_sell]          NVARCHAR (20)   NULL,
    [login_buy]             NVARCHAR (20)   NULL,
    [login_sell]            NVARCHAR (20)   NULL,
    [code_rts_buy]          NVARCHAR (7)    NULL,
    [code_rts_sell]         NVARCHAR (7)    NULL,
    [id_ord_buy]            BIGINT          NULL,
    [id_ord_sell]           BIGINT          NULL,
    [reason_buy]            INT             NULL,
    [reason_sell]           INT             NULL,
    [private_order_id_buy]  BIGINT          NULL,
    [private_order_id_sell] BIGINT          NULL
);


GO
PRINT N'Creating Table [crs].[user_deal]...';


GO
CREATE TABLE [crs].[user_deal] (
    [replID]                BIGINT          NULL,
    [replRev]               BIGINT          NULL,
    [replAct]               BIGINT          NULL,
    [sess_id]               INT             NULL,
    [isin_id]               INT             NULL,
    [id_deal]               BIGINT          NULL,
    [id_deal_multileg]      BIGINT          NULL,
    [id_repo]               BIGINT          NULL,
    [xpos]                  BIGINT          NULL,
    [xamount]               BIGINT          NULL,
    [public_order_id_buy]   BIGINT          NULL,
    [public_order_id_sell]  BIGINT          NULL,
    [price]                 DECIMAL (16, 5) NULL,
    [moment]                DATETIME2 (3)   NULL,
    [moment_ns]             DECIMAL (20)    NULL,
    [nosystem]              TINYINT         NULL,
    [xstatus_buy]           BIGINT          NULL,
    [xstatus_sell]          BIGINT          NULL,
    [ext_id_buy]            INT             NULL,
    [ext_id_sell]           INT             NULL,
    [code_buy]              NVARCHAR (7)    NULL,
    [code_sell]             NVARCHAR (7)    NULL,
    [comment_buy]           NVARCHAR (20)   NULL,
    [comment_sell]          NVARCHAR (20)   NULL,
    [fee_buy]               DECIMAL (26, 2) NULL,
    [fee_sell]              DECIMAL (26, 2) NULL,
    [login_buy]             NVARCHAR (20)   NULL,
    [login_sell]            NVARCHAR (20)   NULL,
    [code_rts_buy]          NVARCHAR (7)    NULL,
    [code_rts_sell]         NVARCHAR (7)    NULL,
    [id_ord_buy]            BIGINT          NULL,
    [id_ord_sell]           BIGINT          NULL,
    [reason_buy]            INT             NULL,
    [reason_sell]           INT             NULL,
    [private_order_id_buy]  BIGINT          NULL,
    [private_order_id_sell] BIGINT          NULL
);


GO
PRINT N'Creating Index [crs].[user_deal].[IDX_user_deal_REV_U]...';


GO
CREATE UNIQUE NONCLUSTERED INDEX [IDX_user_deal_REV_U]
    ON [crs].[user_deal]([replRev] ASC);


GO
PRINT N'Creating Table [crs].[multileg_orders_log]...';


GO
CREATE TABLE [crs].[multileg_orders_log] (
    [replID]                BIGINT          NULL,
    [replRev]               BIGINT          NULL,
    [replAct]               BIGINT          NULL,
    [public_order_id]       BIGINT          NULL,
    [sess_id]               INT             NULL,
    [isin_id]               INT             NULL,
    [public_amount]         BIGINT          NULL,
    [public_amount_rest]    BIGINT          NULL,
    [id_deal]               BIGINT          NULL,
    [xstatus]               BIGINT          NULL,
    [price]                 DECIMAL (16, 5) NULL,
    [moment]                DATETIME2 (3)   NULL,
    [moment_ns]             DECIMAL (20)    NULL,
    [dir]                   TINYINT         NULL,
    [public_action]         TINYINT         NULL,
    [deal_price]            DECIMAL (16, 5) NULL,
    [rate_price]            DECIMAL (16, 5) NULL,
    [swap_price]            DECIMAL (16, 5) NULL,
    [client_code]           NVARCHAR (7)    NULL,
    [login_from]            NVARCHAR (20)   NULL,
    [comment]               NVARCHAR (20)   NULL,
    [ext_id]                INT             NULL,
    [broker_to]             NVARCHAR (7)    NULL,
    [broker_to_rts]         NVARCHAR (7)    NULL,
    [broker_from_rts]       NVARCHAR (7)    NULL,
    [date_exp]              DATETIME2 (3)   NULL,
    [id_ord1]               BIGINT          NULL,
    [aspref]                INT             NULL,
    [id_ord]                BIGINT          NULL,
    [xamount]               BIGINT          NULL,
    [xamount_rest]          BIGINT          NULL,
    [variance_amount]       BIGINT          NULL,
    [disclose_const_amount] BIGINT          NULL,
    [action]                TINYINT         NULL,
    [reason]                INT             NULL,
    [private_order_id]      BIGINT          NULL,
    [private_amount]        BIGINT          NULL,
    [private_amount_rest]   BIGINT          NULL,
    [private_action]        TINYINT         NULL
);


GO
PRINT N'Creating Index [crs].[multileg_orders_log].[IDX_multileg_orders_log_REV_U]...';


GO
CREATE UNIQUE NONCLUSTERED INDEX [IDX_multileg_orders_log_REV_U]
    ON [crs].[multileg_orders_log]([replRev] ASC);


GO
PRINT N'Creating Table [crs].[orders_log]...';


GO
CREATE TABLE [crs].[orders_log] (
    [replID]                BIGINT          NULL,
    [replRev]               BIGINT          NULL,
    [replAct]               BIGINT          NULL,
    [public_order_id]       BIGINT          NULL,
    [sess_id]               INT             NULL,
    [isin_id]               INT             NULL,
    [public_amount]         BIGINT          NULL,
    [public_amount_rest]    BIGINT          NULL,
    [id_deal]               BIGINT          NULL,
    [xstatus]               BIGINT          NULL,
    [xstatus2]              BIGINT          NULL,
    [price]                 DECIMAL (16, 5) NULL,
    [moment]                DATETIME2 (3)   NULL,
    [moment_ns]             DECIMAL (20)    NULL,
    [dir]                   TINYINT         NULL,
    [public_action]         TINYINT         NULL,
    [deal_price]            DECIMAL (16, 5) NULL,
    [client_code]           NVARCHAR (7)    NULL,
    [login_from]            NVARCHAR (20)   NULL,
    [comment]               NVARCHAR (20)   NULL,
    [ext_id]                INT             NULL,
    [broker_to]             NVARCHAR (7)    NULL,
    [broker_to_rts]         NVARCHAR (7)    NULL,
    [broker_from_rts]       NVARCHAR (7)    NULL,
    [date_exp]              DATETIME2 (3)   NULL,
    [id_ord1]               BIGINT          NULL,
    [aspref]                INT             NULL,
    [id_ord]                BIGINT          NULL,
    [xamount]               BIGINT          NULL,
    [xamount_rest]          BIGINT          NULL,
    [variance_amount]       BIGINT          NULL,
    [disclose_const_amount] BIGINT          NULL,
    [action]                TINYINT         NULL,
    [reason]                INT             NULL,
    [private_order_id]      BIGINT          NOT NULL,
    [private_amount]        BIGINT          NULL,
    [private_amount_rest]   BIGINT          NULL,
    [private_action]        TINYINT         NULL,
    PRIMARY KEY CLUSTERED ([private_order_id] ASC)
);


GO
PRINT N'Creating Table [dbo].[data_source]...';


GO
CREATE TABLE [dbo].[data_source] (
    [data_source_id] TINYINT       NOT NULL,
    [name]           VARCHAR (100) COLLATE Cyrillic_General_CI_AS NULL,
    CONSTRAINT [PK_data_source] PRIMARY KEY CLUSTERED ([data_source_id] ASC)
);


GO
PRINT N'Creating Table [dbo].[DataGeneration]...';


GO
CREATE TABLE [dbo].[DataGeneration] (
    [Id]             INT           IDENTITY (1, 1) NOT NULL,
    [column_id]      INT           NOT NULL,
    [object_id]      INT           NOT NULL,
    [system_type_id] TINYINT       NOT NULL,
    [max_length]     SMALLINT      NOT NULL,
    [Range]          VARCHAR (200) NOT NULL,
    PRIMARY KEY CLUSTERED ([Id] ASC)
);


GO
PRINT N'Creating Table [dbo].[metaadapter]...';


GO
CREATE TABLE [dbo].[metaadapter] (
    [metaadapter_id] TINYINT      NOT NULL,
    [name]           VARCHAR (50) NULL,
    PRIMARY KEY CLUSTERED ([metaadapter_id] ASC)
);


GO
PRINT N'Creating Table [dbo].[metamap]...';


GO
CREATE TABLE [dbo].[metamap] (
    [metamap_id]     SMALLINT       NOT NULL,
    [msg_key]        NVARCHAR (256) NOT NULL,
    [table_name]     NVARCHAR (128) NOT NULL,
    [metaadapter_id] TINYINT        NULL,
    [namespace]      NVARCHAR (256) NULL,
    [namespace_ver]  NVARCHAR (256) NULL,
    [etl_query]      NVARCHAR (256) NULL,
    [import_query]   NVARCHAR (256) NULL,
    [is_enable]      BIT            NOT NULL,
    CONSTRAINT [PK_metamap] PRIMARY KEY CLUSTERED ([metamap_id] ASC)
);


GO
PRINT N'Creating Table [dbo].[msgqueue]...';


GO
CREATE TABLE [dbo].[msgqueue] (
    [buffer_id]  BIGINT           IDENTITY (1, 1) NOT NULL,
    [session_id] BIGINT           NOT NULL,
    [msg_id]     UNIQUEIDENTIFIER NULL,
    [msg]        NVARCHAR (MAX)   NULL,
    [msg_key]    NVARCHAR (256)   NULL,
    [dt_create]  DATETIME2 (4)    NOT NULL,
    PRIMARY KEY CLUSTERED ([buffer_id] ASC)
);


GO
PRINT N'Creating Table [dbo].[msgtype]...';


GO
CREATE TABLE [dbo].[msgtype] (
    [msgtype_id] TINYINT       NOT NULL,
    [name]       VARCHAR (100) NOT NULL,
    PRIMARY KEY CLUSTERED ([msgtype_id] ASC)
);


GO
PRINT N'Creating Table [dbo].[session]...';


GO
CREATE TABLE [dbo].[session] (
    [session_id]       BIGINT         IDENTITY (1, 1) NOT NULL,
    [data_source_id]   TINYINT        NOT NULL,
    [session_state_id] TINYINT        NOT NULL,
    [error_message]    VARCHAR (4000) NULL,
    [dt_update]        DATETIME2 (4)  NOT NULL,
    [dt_create]        DATETIME2 (4)  NOT NULL,
    CONSTRAINT [PK_session] PRIMARY KEY CLUSTERED ([session_id] ASC)
);


GO
PRINT N'Creating Table [dbo].[session_log]...';


GO
CREATE TABLE [dbo].[session_log] (
    [session_log_id]   BIGINT         IDENTITY (1, 1) NOT NULL,
    [session_id]       BIGINT         NOT NULL,
    [session_state_id] TINYINT        NOT NULL,
    [error_message]    VARCHAR (4000) NULL,
    [dt_create]        DATETIME2 (4)  NOT NULL,
    CONSTRAINT [PK_session_log] PRIMARY KEY CLUSTERED ([session_log_id] ASC)
);


GO
PRINT N'Creating Table [dbo].[session_state]...';


GO
CREATE TABLE [dbo].[session_state] (
    [session_state_id] TINYINT       NOT NULL,
    [name]             VARCHAR (100) NULL,
    CONSTRAINT [PK_session_state] PRIMARY KEY CLUSTERED ([session_state_id] ASC)
);


GO
PRINT N'Creating Table [dbo].[Setting]...';


GO
CREATE TABLE [dbo].[Setting] (
    [SettingID] VARCHAR (50)   NOT NULL,
    [StrValue]  NVARCHAR (256) NULL,
    CONSTRAINT [PK_Setting] PRIMARY KEY NONCLUSTERED ([SettingID] ASC)
);


GO
PRINT N'Creating Default Constraint [audit].[DF_LogProcedures_start_datetime]...';


GO
ALTER TABLE [audit].[LogProcedures]
    ADD CONSTRAINT [DF_LogProcedures_start_datetime] DEFAULT (getdate()) FOR [StartTime];


GO
PRINT N'Creating Default Constraint [audit].[DF_LogProcedures_SysUserName]...';


GO
ALTER TABLE [audit].[LogProcedures]
    ADD CONSTRAINT [DF_LogProcedures_SysUserName] DEFAULT (original_login()) FOR [SysUserName];


GO
PRINT N'Creating Default Constraint [audit].[DF_LogProcedures_SysHostName]...';


GO
ALTER TABLE [audit].[LogProcedures]
    ADD CONSTRAINT [DF_LogProcedures_SysHostName] DEFAULT (host_name()) FOR [SysHostName];


GO
PRINT N'Creating Default Constraint [audit].[DF_LogProcedures_SysAppName]...';


GO
ALTER TABLE [audit].[LogProcedures]
    ADD CONSTRAINT [DF_LogProcedures_SysAppName] DEFAULT (app_name()) FOR [SysAppName];


GO
PRINT N'Creating Default Constraint [audit].[DF_LogProcedures_spid]...';


GO
ALTER TABLE [audit].[LogProcedures]
    ADD CONSTRAINT [DF_LogProcedures_spid] DEFAULT (@@spid) FOR [SPID];


GO
PRINT N'Creating Default Constraint [crs].[DF_crs_orders_log_buffer_IS_ERROR_DEFAULT]...';


GO
ALTER TABLE [crs].[orders_log_buffer]
    ADD CONSTRAINT [DF_crs_orders_log_buffer_IS_ERROR_DEFAULT] DEFAULT ((0)) FOR [is_error];


GO
PRINT N'Creating Default Constraint [crs].[DF_crs_orders_log_buffer_dt_create_DEFAULT]...';


GO
ALTER TABLE [crs].[orders_log_buffer]
    ADD CONSTRAINT [DF_crs_orders_log_buffer_dt_create_DEFAULT] DEFAULT (getdate()) FOR [dt_create];


GO
PRINT N'Creating Default Constraint [crs].[DF_crs_orders_log_buffer_dt_update_DEFAULT]...';


GO
ALTER TABLE [crs].[orders_log_buffer]
    ADD CONSTRAINT [DF_crs_orders_log_buffer_dt_update_DEFAULT] DEFAULT (datefromparts((1900),(1),(1))) FOR [dt_update];


GO
PRINT N'Creating Default Constraint [dbo].[DF__msgqueue__dt_create]...';


GO
ALTER TABLE [dbo].[msgqueue]
    ADD CONSTRAINT [DF__msgqueue__dt_create] DEFAULT (getdate()) FOR [dt_create];


GO
PRINT N'Creating Default Constraint [dbo].[DF_session_dt_update_DEFAULT]...';


GO
ALTER TABLE [dbo].[session]
    ADD CONSTRAINT [DF_session_dt_update_DEFAULT] DEFAULT (getdate()) FOR [dt_update];


GO
PRINT N'Creating Default Constraint [dbo].[DF_session_dt_create_DEFAULT]...';


GO
ALTER TABLE [dbo].[session]
    ADD CONSTRAINT [DF_session_dt_create_DEFAULT] DEFAULT (getdate()) FOR [dt_create];


GO
PRINT N'Creating Default Constraint [dbo].[DF_session_log_date_DEFAULT]...';


GO
ALTER TABLE [dbo].[session_log]
    ADD CONSTRAINT [DF_session_log_date_DEFAULT] DEFAULT (getdate()) FOR [dt_create];


GO
PRINT N'Creating Foreign Key [dbo].[FK_session_session_state]...';


GO
ALTER TABLE [dbo].[session]
    ADD CONSTRAINT [FK_session_session_state] FOREIGN KEY ([session_state_id]) REFERENCES [dbo].[session_state] ([session_state_id]);


GO
PRINT N'Creating Foreign Key [dbo].[FK_session_log_session]...';


GO
ALTER TABLE [dbo].[session_log]
    ADD CONSTRAINT [FK_session_log_session] FOREIGN KEY ([session_id]) REFERENCES [dbo].[session] ([session_id]);


GO
PRINT N'Creating Foreign Key [dbo].[FK_session_log_session_state]...';


GO
ALTER TABLE [dbo].[session_log]
    ADD CONSTRAINT [FK_session_log_session_state] FOREIGN KEY ([session_state_id]) REFERENCES [dbo].[session_state] ([session_state_id]);


GO
PRINT N'Creating Function [dbo].[fn_GenerationRandomField]...';


GO
-- SELECT dbo.fn_GenerationRandomField(127,8,RAND(), NEWID(),'1,100')
-- SELECT dbo.fn_GenerationRandomField(231,40,RAND(), NEWID(),'1,100')

--SELECT * FROM sys.types T WHERE system_type_id = 231



CREATE   FUNCTION [dbo].[fn_GenerationRandomField](
@system_type_id int,
@max_length int,
@Rand float,
@Newid uniqueidentifier,
@range varchar(100)
) RETURNS varchar(100)
AS 
BEGIN
    DECLARE @Value varchar(100)
    SET @Value = (SELECT 
    CASE T.[name] 
        WHEN 'tinyint' THEN CAST(CAST(@Rand*256 AS tinyint ) AS varchar(100))
        WHEN 'smallint' THEN CAST(CAST(@Rand*256 AS tinyint ) AS varchar(100))
        WHEN 'int' THEN CAST(CAST(@Rand*256 AS tinyint ) AS varchar(100))
        WHEN 'bigint' THEN CAST(CAST(@Rand*256 AS tinyint ) AS varchar(100))
        WHEN 'real' THEN CAST(@Rand AS varchar(100))
        WHEN 'money' THEN CAST(@Rand AS varchar(100))
        WHEN 'float' THEN CAST(@Rand AS varchar(100))
        WHEN 'decimal' THEN CAST(@Rand AS varchar(100))
        WHEN 'numeric' THEN CAST(@Rand AS varchar(100))
        WHEN 'smallmoney' THEN CAST(@Rand AS varchar(100))
        WHEN 'decimal' THEN CAST(@Rand AS varchar(100))
        WHEN 'datetime' THEN FORMAT(GetDate(),'yyyy.MM.dd HH:mm:ss.ffffff')
        WHEN 'datetime2' THEN FORMAT(GetDate(),'yyyy.MM.dd HH:mm:ss.ffffff')
    ELSE 
     CONVERT(varchar(255), @Newid)
    END
    FROM sys.types T
    WHERE --system_type_id 
    user_type_id = @system_type_id
    )
    RETURN @Value
END
GO
PRINT N'Creating Function [dbo].[fn_GetBufferingDays]...';


GO
CREATE FUNCTION dbo.fn_GetBufferingDays(
  @ProcedureName varchar(256)
) RETURNS int
AS 
BEGIN
  RETURN CASE @ProcedureName WHEN '[crs].[load_orders_log]' THEN 1
  ELSE 1
  END
END
GO
PRINT N'Creating Function [dbo].[fn_GetSettingValue]...';


GO

CREATE       Function [dbo].[fn_GetSettingValue](
    @SettingID    varchar(50)
) RETURNS nvarchar(256)
AS
BEGIN
    RETURN (SELECT StrValue FROM [dbo].[Setting] WITH( NOLOCK ) WHERE SettingID = @SettingID)
END
GO
PRINT N'Creating Procedure [audit].[sp_Print]...';


GO
SET ANSI_NULLS ON;

SET QUOTED_IDENTIFIER OFF;


GO
/*

[audit].[sp_Print] @StrPrint = ' SELECT * FROM Security '
[audit].[sp_Print] 'ds', 8
*/

CREATE     PROCEDURE [audit].[sp_Print]
    @StrPrint   nvarchar(max),
    @PrintLevel int = 1 -- 1-Debug, 2-Info, 3-Warning, 4-Exception, 5-Test, 6-NotPrint
AS
BEGIN
    IF @PrintLevel >= 6
        RETURN 0
    DECLARE @AuditPrintLevel int
    SELECT @AuditPrintLevel = ISNULL([dbo].[fn_GetSettingInt]('AuditPrintLevel'), 0)

    IF @PrintLevel < @AuditPrintLevel
        RETURN 0

    DECLARE @StrTmp  nvarchar(4000),
        @StrPart     int = 3500,
        @StrLen      int = LEN(@StrPrint),
        @EndPart     int,
        @StrPrintTmp nvarchar(MAX)

    WHILE @StrLen > 0
        BEGIN 
            IF @StrLen <= @StrPart 
                BEGIN
                    Print @StrPrint
                    BREAK
                END
            SET @StrTmp = LEFT(@StrPrint, @StrPart)
            SET @StrPrintTmp = RIGHT(@StrPrint, @StrLen - LEN(@StrTmp))
            SET @EndPart = CHARINDEX(CHAR(13), @StrPrintTmp) +1
            SET @StrTmp = @StrTmp + LEFT(@StrPrintTmp, @EndPart)
            Print @StrTmp        

            SET @StrPrint = RIGHT(@StrPrint, @StrLen - LEN(@StrTmp))
            SET @StrLen  = LEN(@StrPrint)
        END 
END
GO
SET ANSI_NULLS, QUOTED_IDENTIFIER ON;


GO
PRINT N'Creating Procedure [audit].[sp_lnk_Insert]...';


GO

CREATE   PROCEDURE [audit].[sp_lnk_Insert](
    @MainID           bigint = NULL,
    @ParentID         bigint = NULL,
    @StartTime        datetime2(4),
    @SysUserName      varchar(256),
    @SysHostName      varchar(100),
    @SysDbName        varchar(128),
    @SysAppName       varchar(128),
    @SPID             int,
    @ProcedureName    varchar(512) ,
    @ProcedureParams  varchar(max),
    @TransactionCount int,
    @LogID            bigint OUTPUT
)
AS
BEGIN

    INSERT INTO [audit].LogProcedures (
        MainID,
        ParentID,
        StartTime,
        SysUserName,
        SysHostName,
        SysDbName,
        SysAppName,
        SPID,
        ProcedureName,
        ProcedureParams,
        TransactionCount
     ) VALUES (
        @MainID,
        @ParentID,
        @StartTime,
        @SysUserName,
        @SysHostName,
        @SysDbName,
        @SysAppName,
        @SPID,
        @ProcedureName,
        @ProcedureParams,
        @TransactionCount
    )

    SET @LogID  = SCOPE_IDENTITY()
       
   IF @MainID IS NULL 
        UPDATE [audit].[LogProcedures]
            SET MainID   = @LogID
        WHERE LogID = @LogID
                
END;
GO
PRINT N'Creating Procedure [audit].[sp_lnk_Update]...';


GO

CREATE     PROCEDURE [audit].[sp_lnk_Update]
    @LogID          int,
    @EndTime        datetime2(4)  = NULL,
    @RowCount       int  = NULL,
    @TranCount      int  = NULL,
    @ProcedureInfo  varchar(max)  = NULL,
    @ErrorMessage   varchar(4000) = NULL
AS
    IF @EndTime IS NULL
    BEGIN
        UPDATE [audit].[LogProcedures] SET
            [ProcedureInfo] = ISNULL([ErrorMessage],'') 
                                 + ISNULL(@ErrorMessage + '; ', ''),
            [ErrorMessage]  = LEFT( ISNULL([ErrorMessage],'') 
                                 + ISNULL(@ErrorMessage + '; ', '')  , 2048)
        WHERE [LogID] = @LogID
    END
    ELSE
	    UPDATE [audit].[LogProcedures] SET
            [EndTime]       = @EndTime,
            [Duration]      = DATEDIFF(ms, [StartTime], @EndTime),
            [RowCount]      = @RowCount,
            [ProcedureInfo] = ISNULL([ProcedureInfo], '')
                                + CASE WHEN [TransactionCount] = @TranCount THEN '' 
                                ELSE 'Tran count changed to ' + ISNULL(LTRIM(STR(@TranCount, 10, 0)), 'NULL') + ';' END
                                + CASE WHEN @ProcedureInfo IS NULL THEN ''
                                ELSE 'Finish:' + CONVERT(varchar(19), @EndTime, 120) + ':' + @ProcedureInfo + ';' END, 
            [ErrorMessage]  = LEFT( ISNULL([ErrorMessage],'') 
                                     + ISNULL(@ErrorMessage + '; ', '')  , 2048)
        WHERE [LogID] = @LogID

RETURN 0
GO
PRINT N'Creating Procedure [audit].[sp_log_Start]...';


GO

/*
BEGIN TRAN
DECLARE @LogID int 
EXEC [audit].sp_log_Start @AuditProcEnable ='AuditProcEnable', @LogID = @LogID output
SELECT @LogID

SELECT [dbo].[fn_GetSettingValue]('AuditProcAll')
SELECT * FROM [audit].[LogProcedures]
ROLLBACk

*/

CREATE   PROCEDURE [audit].[sp_log_Start]   
    @AuditProcEnable nvarchar(256) = NULL,
    @ProcedureName   varchar(512)  = NULL,
    @ProcedureParams varchar(MAX)  = NULL,
    @LogID           int           = NULL OUTPUT
    
AS 
BEGIN
    SET NOCOUNT ON 
    IF @AuditProcEnable is NULL
        RETURN 0
        
    IF OBJECT_ID('tempdb..#LogProc') IS NULL
        CREATE TABLE #LogProc(LogID int Primary Key NOT NULL)
                
    DECLARE 
        @ParentID    int, 
        @MainID      int, 
        @CountIds    int, 
        @StartTime   datetime2(4)  = GetDate(),  
        @SysDbName   nvarchar(128) = DB_NAME(),
        @SysUserName varchar(256)  = original_login(),
        @SysHostName varchar(128)  = CAST(@@SERVERNAME as varchar(100)),
        @SysAppName  varchar(128)  = app_name()

    SELECT @MainID    =   MIN(LogID), 
           @ParentID  =   MAX(LogID), 
           @CountIds  = COUNT(LogID) 
    FROM #LogProc
        
    SET @ProcedureName = LEFT(REPLICATE('  ', @CountIds) + LTRIM(RTRIM(@ProcedureName)), 512)

    IF EXISTS ( SELECT 1 FROM sys.dm_exec_sessions WITH(nolock)
        WHERE session_id = @@SPID AND transaction_isolation_level = 5)
        --SNAPSHOT ISOLATION LEVEL Remote access is not supported for transaction isolation level "SNAPSHOT".
        EXEC [audit].sp_lnk_Insert
            @MainID           = @MainID,
            @ParentID         = @ParentID,
            @StartTime        = @StartTime,
            @SysUserName      = @SysUserName,
            @SysHostName      = @SysHostName,
            @SysDbName        = @SysDbName,
            @SysAppName       = @SysAppName,
            @SPID             = @@SPID,
            @ProcedureName    = @ProcedureName,
            @ProcedureParams  = @ProcedureParams,
            @TransactionCount = @@TRANCOUNT,
            @LogID            = @LogID OUTPUT
    ELSE
        EXEC [$(LinkSRVLog)].[$(DatabaseName)].[audit].sp_lnk_Insert
            @MainID           = @MainID,
            @ParentID         = @ParentID,
            @StartTime        = @StartTime,
            @SysUserName      = @SysUserName,
            @SysHostName      = @SysHostName,
            @SysDbName        = @SysDbName,
            @SysAppName       = @SysAppName,
            @SPID             = @@SPID,
            @ProcedureName    = @ProcedureName,
            @ProcedureParams  = @ProcedureParams,
            @TransactionCount = @@TRANCOUNT,
            @LogID            = @LogID OUTPUT

    IF @ParentID IS NULL OR @ParentID < @LogID 
        INSERT #LogProc(LogID) VALUES(@LogID)   

END
GO
PRINT N'Creating Procedure [audit].[sp_log_Finish]...';


GO


CREATE     PROCEDURE [audit].[sp_log_Finish] 
    @LogID          int = NULL,    
    @RowCount       int = NULL,
    @ProcedureInfo  varchar(MAX) = NULL,
    @ErrorMessage   varchar(4000) = NULL
AS 
BEGIN
    SET NOCOUNT ON 
    IF @LogID IS NULL RETURN 0
    DECLARE 
        @EndTime   datetime2(4) = GetDate(),
        @TranCount int          = @@TRANCOUNT
    
    IF OBJECT_ID('tempdb..#LogProc') IS NULL
        CREATE TABLE #LogProc(LogID int Primary Key NOT NULL)

    IF EXISTS ( SELECT 1 FROM sys.dm_exec_sessions WITH(nolock)
        WHERE session_id = @@SPID AND transaction_isolation_level = 5)
        --SNAPSHOT ISOLATION LEVEL Remote access is not supported for transaction isolation level "SNAPSHOT".

        EXEC [audit].sp_lnk_Update
            @LogID         = @LogID,
            @EndTime       = @EndTime,
            @RowCount      = @RowCount,
            @TranCount     = @TranCount,
            @ProcedureInfo = @ProcedureInfo,
            @ErrorMessage  = @ErrorMessage
    
    ELSE
        EXEC [$(LinkSRVLog)].[$(DatabaseName)].[audit].sp_lnk_Update
            @LogID         = @LogID,
            @EndTime       = @EndTime,
            @RowCount      = @RowCount,
            @TranCount     = @TranCount,
            @ProcedureInfo = @ProcedureInfo,
            @ErrorMessage  = @ErrorMessage

    DELETE FROM #LogProc WHERE LogID >= @LogID
END
GO
PRINT N'Creating Procedure [audit].[sp_log_Info]...';


GO
CREATE   PROCEDURE [audit].[sp_log_Info] 
    @LogID         int          = NULL,
    @ProcedureInfo varchar(max) = NULL
AS 
BEGIN
                    
    IF @LogID IS NULL RETURN 0
    IF EXISTS ( SELECT 1 FROM sys.dm_exec_sessions WITH(nolock)
        WHERE session_id = @@SPID AND transaction_isolation_level = 5)
        --SNAPSHOT ISOLATION LEVEL Remote access is not supported for transaction isolation level "SNAPSHOT".
        EXEC [audit].sp_lnk_Update
            @LogID         = @LogID,
            @ProcedureInfo = @ProcedureInfo
    ELSE
        EXEC [$(LinkSRVLog)].[$(DatabaseName)].[audit].sp_lnk_Update
            @LogID         = @LogID,
            @ProcedureInfo = @ProcedureInfo

    RETURN 0
END
GO
PRINT N'Creating Procedure [crs].[load_orders_log]...';


GO
--'crs','orders_log'
-- EXEC [crs].[load_orders_log] 0
CREATE   PROCEDURE [crs].[load_orders_log]
  @session_id         bigint         = NULL,
  @BufferHistoryMode  tinyint        = 0,  -- 0 - Do not delete the buffering history.
                                           -- 1 - Delete the buffering history.
                                           -- 2 - Keep the buffering history for 1 days.
                                           -- 3 - Keep the buffering history for a days from setup.
  @RowCount           int            = NULL OUTPUT,
  @ErrorMessage       varchar(4000)  = NULL OUTPUT
AS
BEGIN
  
SET CONCAT_NULL_YIELDS_NULL ON
SET NOCOUNT ON
DECLARE @LogID int, @ProcedureName varchar(510), @ProcedureParams varchar(max), @ProcedureInfo varchar(max), @AuditProcEnable nvarchar(256)
SET @AuditProcEnable = [dbo].[fn_GetSettingValue]('AuditProcAll')
SET @ProcedureName = '[' + OBJECT_SCHEMA_NAME(@@PROCID)+'].['+OBJECT_NAME(@@PROCID)+']'
IF @AuditProcEnable IS NOT NULL 
BEGIN
  IF OBJECT_ID('tempdb..#LogProc') IS NULL
    CREATE TABLE #LogProc(LogID int Primary Key NOT NULL)
  
  SET @ProcedureParams =
    '@session_id=' + ISNULL(LTRIM(STR(@session_id)),'NULL') + ', ' +
    '@BufferHistoryMode=' + ISNULL(LTRIM(STR(@BufferHistoryMode)),'NULL')
END
SET XACT_ABORT OFF

SET TRANSACTION ISOLATION LEVEL READ COMMITTED
SET DEADLOCK_PRIORITY LOW
DECLARE @MinDate datetime2(4) = DATEFROMPARTS(1900, 01, 01),
    @UpdateDate datetime2(4)  = GetDate(),
    @BufferHistoryDays int

IF @BufferHistoryMode = 2
  SET @BufferHistoryDays = 1
ELSE
  SET @BufferHistoryDays = dbo.fn_GetBufferingDays(@ProcedureName)

CREATE TABLE #LockedList (
    [buffer_id] bigint Primary key,
    [msg_id] uniqueidentifier,
    [RefID] bigint,
    [msgtype_id] tinyint
)

CREATE TABLE #LockedListUniq(
    [buffer_id] bigint Primary key,
    [RefID] bigint
)

BEGIN TRY
  BEGIN TRANSACTION

    IF @AuditProcEnable IS NOT NULL 
        EXEC [audit].[sp_log_Start] @AuditProcEnable = @AuditProcEnable, @ProcedureName = @ProcedureName, @ProcedureParams = @ProcedureParams, @LogID = @LogID OUTPUT

    INSERT INTO #LockedList
    SELECT buffer_id, msg_id, [RefID], msgtype_id
    FROM [crs].[orders_log_buffer] b 
    WHERE b.[dt_update] = @MinDate
    ORDER BY buffer_id
    

    SET @RowCount = @@ROWCOUNT;
    IF @RowCount = 0 
    BEGIN
    
        EXEC [audit].[sp_log_Finish] @LogID = @LogID, @RowCount = 0, @ProcedureInfo = 'Empty buffer'
        COMMIT TRANSACTION
        RETURN 0
    END

    INSERT INTO #LockedListUniq
    SELECT buffer_id = MAX(buffer_id), [RefID]
    FROM #LockedList l
    WHERE l.msgtype_id = 1 
    GROUP BY [RefID]
    SET @RowCount = @@ROWCOUNT;
    
    MERGE INTO [crs].[orders_log] trg
    USING 
    (
      SELECT 
         [replID]
        ,[replRev]
        ,[replAct]
        ,[public_order_id]
        ,[sess_id]
        ,[isin_id]
        ,[public_amount]
        ,[public_amount_rest]
        ,[id_deal]
        ,[xstatus]
        ,[xstatus2]
        ,[price]
        ,[moment] = CONVERT([datetime2](3), [moment], 102)
        ,[moment_ns]
        ,[dir]
        ,[public_action]
        ,[deal_price]
        ,[client_code]
        ,[login_from]
        ,[comment]
        ,[ext_id]
        ,[broker_to]
        ,[broker_to_rts]
        ,[broker_from_rts]
        ,[date_exp] = CONVERT([datetime2](3), [date_exp], 102)
        ,[id_ord1]
        ,[aspref]
        ,[id_ord]
        ,[xamount]
        ,[xamount_rest]
        ,[variance_amount]
        ,[disclose_const_amount]
        ,[action]
        ,[reason]
        ,[private_order_id]
        ,[private_amount]
        ,[private_amount_rest]
        ,[private_action]
      FROM #LockedListUniq L 
      INNER JOIN [crs].[orders_log_buffer] b ON b.buffer_id = L.buffer_id
      CROSS APPLY (
        SELECT *
        FROM OPENJSON('['+b.msg+']','$')
        WITH 
        (
	        [replID] [bigint] '$[0]',
	        [replRev] [bigint] '$[1]',
	        [replAct] [bigint] '$[2]',
	        [public_order_id] [bigint] '$[3]',
	        [sess_id] [int] '$[4]',
	        [isin_id] [int] '$[5]',
	        [public_amount] [bigint] '$[6]',
	        [public_amount_rest] [bigint] '$[7]',
	        [id_deal] [bigint] '$[8]',
	        [xstatus] [bigint] '$[9]',
          [xstatus2] [bigint] '$[10]',
	        [price] [decimal](16, 5) '$[11]',
	        [moment] varchar(50) '$[12]',
	        [moment_ns] [decimal](20, 0) '$[13]',
	        [dir] [tinyint] '$[14]',
	        [public_action] [tinyint] '$[15]',
	        [deal_price] [decimal](16, 5) '$[16]',
	        [client_code] [nvarchar](7) '$[17]',
	        [login_from] [nvarchar](20) '$[18]',
	        [comment] [nvarchar](20) '$[19]',
	        [ext_id] [int] '$[20]',
	        [broker_to] [nvarchar](7) '$[21]',
	        [broker_to_rts] [nvarchar](7) '$[22]',
	        [broker_from_rts] [nvarchar](7) '$[23]',
	        [date_exp] varchar(50) '$[24]',
	        [id_ord1] [bigint] '$[25]',
	        [aspref] [int] '$[26]',
	        [id_ord] [bigint] '$[27]',
	        [xamount] [bigint] '$[28]',
	        [xamount_rest] [bigint] '$[29]',
	        [variance_amount] [bigint] '$[30]',
	        [disclose_const_amount] [bigint] '$[31]',
	        [action] [tinyint] '$[32]',
	        [reason] [int] '$[33]',
	        [private_order_id] [bigint] '$[34]',
	        [private_amount] [bigint] '$[35]',
	        [private_amount_rest] [bigint] '$[36]',
	        [private_action] [tinyint] '$[37]'
        ) 
      ) OL
       
    ) AS src
    ON src.[private_order_id] = trg.[private_order_id] WHEN MATCHED THEN 
    UPDATE SET
      [replID] = src.[replID],
      [replRev] = src.[replRev],
      [replAct] = src.[replAct],
      [public_order_id] = src.[public_order_id],
      [sess_id] = src.[sess_id],
      [isin_id] = src.[isin_id],
      [public_amount] = src.[public_amount],
      [public_amount_rest] = src.[public_amount_rest],
      [id_deal] = src.[id_deal],
      [xstatus] = src.[xstatus],
      [xstatus2] = src.[xstatus2],
      [price] = src.[price],
      --,[moment] = src.[moment],
      [moment_ns] = src.[moment_ns],
      [dir] = src.[dir],
      [public_action] = src.[public_action],
      [deal_price] = src.[deal_price],
      [client_code] = src.[client_code],
      [login_from] = src.[login_from],
      [comment] = src.[comment],
      [ext_id] = src.[ext_id],
      [broker_to] = src.[broker_to],
      [broker_to_rts] = src.[broker_to_rts],
      [broker_from_rts] = src.[broker_from_rts],
      [date_exp] = src.[date_exp],
      [id_ord1] = src.[id_ord1],
      [aspref] = src.[aspref],
      [id_ord] = src.[id_ord],
      [xamount] = src.[xamount],
      [xamount_rest] = src.[xamount_rest],
      [variance_amount] = src.[variance_amount],
      [disclose_const_amount] = src.[disclose_const_amount],
      [action] = src.[action],
      [reason] = src.[reason],
      [private_amount] = src.[private_amount],
      [private_amount_rest] = src.[private_amount_rest],
      [private_action] = src.[private_action]
    WHEN NOT MATCHED BY TARGET
    THEN INSERT (
        [replID]
      ,[replRev]
      ,[replAct]
      ,[public_order_id]
      ,[sess_id]
      ,[isin_id]
      ,[public_amount]
      ,[public_amount_rest]
      ,[id_deal]
      ,[xstatus]
      ,[xstatus2]
      ,[price]
      ,[moment]
      ,[moment_ns]
      ,[dir]
      ,[public_action]
      ,[deal_price]
      ,[client_code]
      ,[login_from]
      ,[comment]
      ,[ext_id]
      ,[broker_to]
      ,[broker_to_rts]
      ,[broker_from_rts]
      ,[date_exp]
      ,[id_ord1]
      ,[aspref]
      ,[id_ord]
      ,[xamount]
      ,[xamount_rest]
      ,[variance_amount]
      ,[disclose_const_amount]
      ,[action]
      ,[reason]
      ,[private_order_id]
      ,[private_amount]
      ,[private_amount_rest]
      ,[private_action]
    )
    VALUES
    (
       src.[replID],
      src.[replRev],
      src.[replAct],
      src.[public_order_id],
      src.[sess_id],
      src.[isin_id],
      src.[public_amount],
      src.[public_amount_rest],
      src.[id_deal],
      src.[xstatus],
      src.[xstatus2],
      src.[price],
      src.[moment],
      src.[moment_ns],
      src.[dir],
      src.[public_action],
      src.[deal_price],
      src.[client_code],
      src.[login_from],
      src.[comment],
      src.[ext_id],
      src.[broker_to],
      src.[broker_to_rts],
      src.[broker_from_rts],
      src.[date_exp],
      src.[id_ord1],
      src.[aspref],
      src.[id_ord],
      src.[xamount],
      src.[xamount_rest],
      src.[variance_amount],
      src.[disclose_const_amount],
      src.[action],
      src.[reason],
      src.[private_order_id],
      src.[private_amount],
      src.[private_amount_rest],
      src.[private_action]
    );
    -- Update buffer table
    UPDATE b SET
        dt_update = @UpdateDate
    FROM [crs].[orders_log_buffer] AS b
    INNER JOIN #LockedList l ON l.buffer_id = b.buffer_id

    EXEC [audit].[sp_log_Finish] @LogID = @LogID, @RowCount = @RowCount

  COMMIT TRANSACTION
  
  IF @BufferHistoryMode = 1 AND NOT EXISTS (SELECT 1 FROM [crs].[orders_log_buffer] WHERE [is_error] = 1)
  BEGIN
      DELETE b
      FROM [crs].[orders_log_buffer] b
      INNER JOIN #LockedList t ON b.buffer_id = t.buffer_id
  END
   
  IF @BufferHistoryMode >= 2 AND NOT EXISTS (SELECT 1 FROM [crs].[orders_log_buffer] WHERE [is_error] = 1)
    DELETE b
    FROM [crs].[orders_log_buffer] b
    WHERE DATEDIFF(DD, @UpdateDate, dt_update) > @BufferHistoryDays

END TRY
BEGIN CATCH
  SET @ErrorMessage = ERROR_MESSAGE()
  IF XACT_STATE() <> 0 AND @@TRANCOUNT > 0 
    ROLLBACK TRANSACTION

  DECLARE @err_session_id bigint;
  SET @err_session_id = ISNULL(@session_id, 0)
  INSERT [dbo].[session_log] (session_id, [session_state_id], [error_message])
  SELECT
    [session_id] = @err_session_id,
    [session_state_id] = 3,
    [error_message] = 'Table [crs].[orders_log_buffer]. Error: ' + @ErrorMessage

  UPDATE b SET 
    [session_id] = @err_session_id,
    [is_error]   = 1,
    [dt_update]  = ISNULL(@UpdateDate, GetDate())
  FROM [crs].[orders_log_buffer] b
  INNER JOIN #LockedList l ON b.[buffer_id] = l.[buffer_id]
  WHERE [is_error] = 0

  EXEC [audit].[sp_log_Finish] @LogID = @LogID, @RowCount = @RowCount, @ErrorMessage = @ErrorMessage
  EXEC [audit].[sp_Print] @StrPrint = @ErrorMessage
  RETURN -1
END CATCH

END
GO
PRINT N'Creating Procedure [dbo].[rb_SaveSessionState]...';


GO

CREATE   PROCEDURE [dbo].[rb_SaveSessionState] 
    @session_id       bigint = NULL,
    @data_source_id   tinyint = 1,
    @session_state_id tinyint = 1,
    @error_message    varchar(4000) = NULL
AS
SET CONCAT_NULL_YIELDS_NULL ON
    DECLARE @LogID int, @ProcedureName varchar(510), @ProcedureParams varchar(max), @ProcedureInfo varchar(max), @AuditProcEnable nvarchar(256), @RowCount int
    SET @AuditProcEnable = [dbo].[fn_GetSettingValue]('AuditProcAll')
    IF @AuditProcEnable IS NOT NULL 
    BEGIN
        IF OBJECT_ID('tempdb..#LogProc') IS NULL
            CREATE TABLE #LogProc(LogID int Primary Key NOT NULL)
        SET @ProcedureName = '[' + OBJECT_SCHEMA_NAME(@@PROCID)+'].['+OBJECT_NAME(@@PROCID)+']'                        
        SET @ProcedureParams =
            '@session_id='+ISNULL(LTRIM(STR(@session_id)),'NULL') + ', ' +
            '@data_source_id='+ISNULL(LTRIM(STR(@data_source_id)),'NULL') + ', ' +
            '@session_state_id='+ISNULL(LTRIM(STR(@session_state_id)),'NULL')

            
        EXEC [audit].[sp_log_Start] @AuditProcEnable = @AuditProcEnable, @ProcedureName = @ProcedureName, @ProcedureParams = @ProcedureParams, @LogID = @LogID OUTPUT
    END
    IF(@session_id IS NULL)
    BEGIN
        DECLARE @IdentityOutput table ( [session_id] bigint )
        INSERT [session] ([data_source_id],    [session_state_id],    [error_message])
        OUTPUT inserted.[session_id] into @IdentityOutput
        VALUES(@data_source_id, @session_state_id, @error_message)
        SELECT * FROM @IdentityOutput
    END 
    ELSE
    BEGIN
        UPDATE [session] SET 
            [session_state_id] = @session_state_id,    
            [error_message]    = @error_message,
            [dt_update]        = GetDate()
        WHERE [session_id] = @session_id
    END 
    EXEC [audit].[sp_log_Finish] @LogID = @LogID, @RowCount = @RowCount
GO
PRINT N'Creating Procedure [dbo].[sp_GenerationRandomArray]...';


GO
--Moex_CGate
-- =============================================
-- Author:		<Author,,Name>
-- Create date: <Create Date,,>
-- Description:	<Description,,>
-- =============================================
/*TRUNCATE TABLE  [crs].[orders_log_buffer]
TRUNCATE TABLE [dbo].[msgqueue] 
SELECT * FROM [crs].[orders_log_buffer]
SELECT * FROM [dbo].[msgqueue]
EXEC sp_GenerationRandomArray 'crs','orders_log'
TRUNCATE TABLE [dbo].[msgqueue]
[["55","42","205","90","24","0","176","81","33","106","0.297903","CEE77209-0E03-4CB2-9076-4CC8AACD2B27","0.463252","29","54","0.346265","CE1DEF8B-7F57-462C-91B4-5AE43F9703B2","39F706CF-4E6F-48ED-B66B-231C5D27FD0D","558D5F92-C888-442B-8581-FE854C62F8B8","239","30DDF115-78CA-4CC0-BC69-950E6CCCA660","44BDE929-0C36-42D6-8C1E-A0B126DA2FC8","D00D1BC0-E1BB-4202-8037-77ACA2C4E5DB","6E32C3E0-363D-4879-99D6-E879B9C9DDE3","227","255","78","95","242","44","178","183","234","35","215","178","59"]]

*/
CREATE   PROCEDURE [dbo].[sp_GenerationRandomArray](
@SchemaName sysname,
@TableName sysname
)
AS
BEGIN

	SET NOCOUNT ON;
  DECLARE @FullName varchar(256),
    @Array varchar(max),
    @ArrayItem varchar(max),
    @Rand float,
    @column_id int, 
    @object_id int, 
    @system_type_id int, 
    @max_length int, 
    @Range varchar(200),
    @MsgCount int =1,
    @MsgId uniqueidentifier

  SET @FullName = @SchemaName+'.'+@TableName
  SET @MsgCount = RAND() * 20 + 3
  print @MsgCount
  WHILE @MsgCount > 0 BEGIN
    SELECT
      @column_id  = column_id, 
      @object_id = object_id, 
      @system_type_id = system_type_id, 
      @max_length = max_length, 
      @Range = [Range]
    FROM [dbo].[DataGeneration]
    WHERE object_id = OBJECT_ID(@SchemaName+'.'+@TableName)
    AND column_id = 1
  
    SET @ArrayItem = NULL
    WHILE @column_id IS NOT NULL BEGIN

      SELECT @ArrayItem = ISNULL(@ArrayItem + ',','') + '"' + dbo.fn_GenerationRandomField(@system_type_id, @max_length, RAND(),NEWID(),@Range) + '"'
      
      SET @column_id = (SELECT TOP 1 column_id  FROM [dbo].[DataGeneration] WHERE object_id = OBJECT_ID(@SchemaName+'.'+@TableName)  AND column_id > @column_id ORDER BY Id)

      SELECT
        @column_id  = column_id, 
        @object_id = object_id, 
        @system_type_id = system_type_id, 
        @max_length = max_length, 
        @Range = [Range]
      FROM [dbo].[DataGeneration]
      WHERE object_id = OBJECT_ID(@SchemaName + '.' + @TableName)
      AND column_id = @column_id
    END
    SET @Array = ISNULL(@Array +',','') + '[' + @ArrayItem + ']'
    SET @MsgCount = @MsgCount - 1
  
  END
  SET @Array = '[' + @Array + ']'
  
  SET @MsgId = NEWID()
  
  INSERT [dbo].[msgqueue] (session_id, msg_id, msg, msg_key)
  SELECT 1, @MsgId, @Array, @SchemaName + '.' + @TableName
  
  --SELECT * FROM [dbo].[msgqueue]
  -- Insert statements for procedure here
	-- SELECT OBJECT_ID(@SchemaName+'.'+@TableName)
END
GO
/*
Post-Deployment Script Template							
--------------------------------------------------------------------------------------
 This file contains SQL statements that will be appended to the build script.		
 Use SQLCMD syntax to include a file in the post-deployment script.			
 Example:      :r .\myfile.sql								
 Use SQLCMD syntax to reference a variable in the post-deployment script.		
 Example:      :setvar TableName MyTable							
               SELECT * FROM [$(TableName)]					
--------------------------------------------------------------------------------------
*/
IF NOT EXISTS(SELECT 1 FROM data_source WHERE data_source_id =1 )
    INSERT [data_source] ([data_source_id], [name]) VALUES(1, N'crs')
IF NOT EXISTS(SELECT 1 FROM msgtype WHERE msgtype_id =1 )
BEGIN
    INSERT [msgtype] ([msgtype_id], [name]) VALUES(1, N'Bulk')
    INSERT [msgtype] ([msgtype_id], [name]) VALUES(2, N'Full message')
END


DECLARE @session_state AS TABLE
(
    [session_state_id] TINYINT,
    [name] NVARCHAR(100)
)

INSERT @session_state ([session_state_id], [name]) VALUES
(1, N'Начало обработки очереди MQ'),
(2, N'Завершение обработки очереди MQ'),
(3, N'Ошибка в процедуре'),
(4, N'Ошибка в сервисе'),
(5, N'Ручной запуск процедур загрузки из буфера'),
(6, N'Удаление из архива')

IF EXISTS ( 
    SELECT 1 FROM [dbo].[session_state] d 
    LEFT OUTER JOIN @session_state s ON s.[session_state_id] = d.[session_state_id]
    WHERE s.[session_state_id] IS NULL) THROW 60000, N'The table [session_state] was change. ', 1;

MERGE INTO [dbo].[session_state] trg
USING 
@session_state src ON src.[session_state_id] = trg.[session_state_id]
WHEN MATCHED THEN UPDATE SET 
    [name] = src.[name]
WHEN NOT MATCHED BY TARGET THEN 
    INSERT ([session_state_id], [name]) VALUES (src.[session_state_id], src.[name])
WHEN NOT MATCHED BY SOURCE THEN DELETE;

if NOT EXISTS(SELECT 1 FROM [session] WHERe data_source_id =1 )
BEGIN
    SET IDENTITY_INSERT [session] ON
    INSERT INTO [session] ([session_id], [data_source_id], [session_state_id], [error_message])
    SELECT 0,1,5,NULL
    SET IDENTITY_INSERT [session] OFF
END

IF NOT EXISTS(SELECT 1 FROM [dbo].[Setting] WHERE SettingID = 'AuditProcAll' )
INSERT INTO [dbo].[Setting] (SettingID, StrValue) values('AuditProcAll', N'AuditProcAll')

TRUNCATE TABLE [dbo].[DataGeneration]

INSERT INTO [dbo].[DataGeneration] (column_id, object_id, system_type_id, max_length, [Range])
SELECT
    column_id  = column_id, 
    object_id = object_id, 
    system_type_id = system_type_id, 
    max_length = max_length, 
    [Range] = '1,1000'
FROM sys.columns
ORDER BY object_id, column_id

EXEC sp_GenerationRandomArray 'crs', 'orders_log'
EXEC sp_GenerationRandomArray 'crs', 'orders_log'

IF NOT EXISTS(SELECT 1 FROM [dbo].[metaadapter] )
BEGIN
    INSERT INTO [dbo].[metaadapter] ([metaadapter_id], [name]) 
    SELECT 1, N'CGateJson'
    UNION ALL SELECT 5, N'UnknownJsonXml'
END
DECLARE @metamap TABLE
(
    [metamap_id]            smallint       NOT NULL,
    [msg_key]               nvarchar(256)  NOT NULL,
    [table_name]            nvarchar(128)  NOT NULL,
    [metaadapter_id]        tinyint        NULL,
    [namespace]             nvarchar (256) NULL,
    [namespace_ver]         nvarchar (256) NULL,
    [etl_query]             nvarchar (256) NULL,
    [import_query]          nvarchar (256) NULL,
    [is_enable]             bit            NULL
)
INSERT @metamap ([metamap_id], [msg_key], [table_name], [metaadapter_id], [namespace], [namespace_ver], [etl_query], [import_query], [is_enable])
VALUES
(1, N'Unknown', 'msgqueue', 5, CAST(N'https://nevadwh.ru/CatalogObject.Unknown' AS varchar(255)), CAST('https://nevadwh.ru/CatalogObject.Unknown/version1' AS varchar(255)), NULL, NULL, 1),
(2, N'crs.orders_log', N'[crs].[orders_log_buffer]', 1, N'crs.orders_log', N'crs.orders_log/version2.17', N'[crs].[load_orders_log]', NULL, 1)

IF EXISTS ( 
    SELECT 1 FROM [dbo].[metamap] d 
    LEFT OUTER JOIN @metamap s ON s.[metamap_id] = d.[metamap_id]
    WHERE s.[metamap_id] IS NULL) THROW 60000, N'The table [dbo].[metamap] was change.', 1;



MERGE INTO [dbo].[metamap] trg
USING 
@metamap src ON src.[metamap_id] = trg.[metamap_id]
WHEN MATCHED THEN UPDATE SET 
    [msg_key]        = src.[msg_key],
    [table_name]     = src.[table_name],
    [metaadapter_id] = src.[metaadapter_id],
    [namespace]      = src.[namespace],
    [namespace_ver]  = src.[namespace_ver],
    [etl_query]      = src.[etl_query],
    [import_query]   = src.[import_query],
    [is_enable]      = src.[is_enable]
WHEN NOT MATCHED BY TARGET THEN 
INSERT ([metamap_id], [msg_key], [table_name], [metaadapter_id], [namespace], [namespace_ver], [etl_query], [import_query], [is_enable])
    VALUES (
        src.[metamap_id],
        src.[msg_key],
        src.[table_name],
        src.[metaadapter_id],
        src.[namespace],
        src.[namespace_ver],
        src.[etl_query],
        src.[import_query],
        src.[is_enable]
    )
WHEN NOT MATCHED BY SOURCE THEN DELETE;

GO

GO

GO
DECLARE @VarDecimalSupported AS BIT;

SELECT @VarDecimalSupported = 0;

IF ((ServerProperty(N'EngineEdition') = 3)
    AND (((@@microsoftversion / power(2, 24) = 9)
          AND (@@microsoftversion & 0xffff >= 3024))
         OR ((@@microsoftversion / power(2, 24) = 10)
             AND (@@microsoftversion & 0xffff >= 1600))))
    SELECT @VarDecimalSupported = 1;

IF (@VarDecimalSupported > 0)
    BEGIN
        EXECUTE sp_db_vardecimal_storage_format N'$(DatabaseName)', 'ON';
    END


GO
PRINT N'Update complete.';


GO
